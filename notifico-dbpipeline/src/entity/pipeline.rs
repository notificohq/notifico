//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "pipeline")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub project_id: Uuid,
    pub channel: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub steps: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::pipeline_event_j::Entity")]
    PipelineEventJ,
}

impl Related<super::pipeline_event_j::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PipelineEventJ.def()
    }
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        super::pipeline_event_j::Relation::Event.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::pipeline_event_j::Relation::Pipeline.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
